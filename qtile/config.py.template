# THIS FILE IS GENERATED BY NIXOS - DO NOT EDIT MANUALLY
# See Qtile Copyright Notice online

import os
import subprocess
from libqtile.config import Drag, Group, Key, Screen, Match
from libqtile import layout, bar, widget, hook
from libqtile.lazy import lazy

# --- Basic Setup (Constants) ---
mod = "mod4"
mod1 = "alt"
mod2 = "control"
home = os.path.expanduser('~') # Still useful for things like autostart scripts

# --- Placeholders - Values filled by Nix ---
layout_margin = @layout_margin@
layout_border_width = @layout_border_width@
widget_font_size_default = @widget_font_size_default@
widget_padding_default = @widget_padding_default@
widget_font_size_groupbox = @widget_font_size_groupbox@
widget_margin_y_groupbox = @widget_margin_y_groupbox@
widget_margin_x_groupbox = @widget_margin_x_groupbox@
widget_padding_y_groupbox = @widget_padding_y_groupbox@
widget_padding_x_groupbox = @widget_padding_x_groupbox@
widget_borderwidth_groupbox = @widget_borderwidth_groupbox@
widget_linewidth_sep = @widget_linewidth_sep@
widget_padding_sep = @widget_padding_sep@
widget_font_size_layout = @widget_font_size_layout@
widget_font_size_windowname = @widget_font_size_windowname@
widget_font_size_clock = @widget_font_size_clock@
widget_font_size_battery = @widget_font_size_battery@ # Used even if widget is absent
widget_font_size_systray = @widget_font_size_systray@
bar_size = @bar_size@
# Ensure paths are quoted if needed
wallpaper_screen0 = "@wallpaper_screen0@"
# has_battery = @has_battery@

# --- Lazy Functions ---
def window_to_prev_group(qtile):
    if qtile.currentWindow is not None:
        i = qtile.groups.index(qtile.currentGroup)
     # Handle wrapping around
        target_group_index = (i - 1) % len(qtile.groups)
        qtile.currentWindow.togroup(qtile.groups[target_group_index].name)

def window_to_next_group(qtile):
    if qtile.currentWindow is not None:
        i = qtile.groups.index(qtile.currentGroup)
     # Handle wrapping around
        target_group_index = (i + 1) % len(qtile.groups)
        qtile.currentWindow.togroup(qtile.groups[target_group_index].name)

# --- Keybindings ---
keys = [
  # SUPER + KEYS
    Key([mod], "f", lazy.window.toggle_fullscreen()),
    Key([mod], "q", lazy.window.kill()),
  # SUPER + SHIFT KEYS
    Key([mod, "shift"], "r", lazy.reload_config()),
  # QTILE LAYOUT KEYS
    Key([mod], "n", lazy.layout.normalize()),
    Key([mod], "space", lazy.next_layout()),
  # CHANGE FOCUS
    Key([mod], "Up", lazy.layout.up()),
    Key([mod], "Down", lazy.layout.down()),
    Key([mod], "Left", lazy.layout.left()),
    Key([mod], "Right", lazy.layout.right()),
    Key([mod], "k", lazy.layout.up()),
    Key([mod], "j", lazy.layout.down()),
    Key([mod], "h", lazy.layout.left()),
    Key([mod], "l", lazy.layout.right()),
  # RESIZE UP, DOWN, LEFT, RIGHT
    Key([mod, "control"], "l",
        lazy.layout.grow_right(),
        lazy.layout.grow(),
        lazy.layout.increase_ratio(),
        lazy.layout.delete(), # For BSP layout
        ),
    Key([mod, "control"], "Right",
        lazy.layout.grow_right(),
        lazy.layout.grow(),
        lazy.layout.increase_ratio(),
        lazy.layout.delete(), # For BSP layout
        ),
    Key([mod, "control"], "h",
        lazy.layout.grow_left(),
        lazy.layout.shrink(),
        lazy.layout.decrease_ratio(),
        lazy.layout.add(), # For BSP layout
        ),
    Key([mod, "control"], "Left",
        lazy.layout.grow_left(),
        lazy.layout.shrink(),
        lazy.layout.decrease_ratio(),
        lazy.layout.add(), # For BSP layout
        ),
    Key([mod, "control"], "k",
        lazy.layout.grow_up(),
        lazy.layout.grow(),
        lazy.layout.decrease_nmaster(), # For MonadTall/Wide
        ),
    Key([mod, "control"], "Up",
        lazy.layout.grow_up(),
        lazy.layout.grow(),
        lazy.layout.decrease_nmaster(), # For MonadTall/Wide
        ),
    Key([mod, "control"], "j",
        lazy.layout.grow_down(),
        lazy.layout.shrink(),
        lazy.layout.increase_nmaster(), # For MonadTall/Wide
        ),
    Key([mod, "control"], "Down",
        lazy.layout.grow_down(),
        lazy.layout.shrink(),
        lazy.layout.increase_nmaster(), # For MonadTall/Wide
        ),
  # FLIP LAYOUT FOR MONADTALL/MONADWIDE
    Key([mod, "shift"], "f", lazy.layout.flip()),
  # MOVE WINDOWS UP OR DOWN MONADTALL/MONADWIDE LAYOUT
    Key([mod, "shift"], "Up", lazy.layout.shuffle_up()),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up()),
    Key([mod, "shift"], "Down", lazy.layout.shuffle_down()),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down()),
    Key([mod, "shift"], "Left", lazy.layout.swap_left()), # For Columns layout too
    Key([mod, "shift"], "h", lazy.layout.swap_left()),    # For Columns layout too
    Key([mod, "shift"], "Right", lazy.layout.swap_right()),# For Columns layout too
    Key([mod, "shift"], "l", lazy.layout.swap_right()),   # For Columns layout too
  # TOGGLE FLOATING LAYOUT
    Key([mod, "shift"], "space", lazy.window.toggle_floating()),
  # TOGGLE MINIMIZATION OF FOCUSED WINDOW  
    Key([mod], "m", lazy.window.toggle_minimize(), desc="Toggle minimization on focused window"),
    Key([mod, "shift"], "u", lazy.group.unminimize_all(), desc="Unminimize all windows in the current group"),
  # MOVE FOCUS TO THE OTHER SCREEN
    # Key([mod], "semicolon", lazy.next_screen()),
]

# --- Multi-screen Keybindings ---
# Note: These assume screen 0 is 'small' and screen 1 is 'big'. Adjust if needed.
#
# def window_to_prev_screen(qtile, switch_group=False, switch_screen=False):
#     i = qtile.screens.index(qtile.current_screen)
#     if i != 0:
#         group = qtile.screens[i - 1].group.name
#         qtile.current_window.togroup(group, switch_group=switch_group)
#         if switch_screen:
#             qtile.cmd_to_screen(i - 1)
#
# def window_to_next_screen(qtile, switch_group=False, switch_screen=False):
#     i = qtile.screens.index(qtile.current_screen)
#     if i + 1 != len(qtile.screens):
#         group = qtile.screens[i + 1].group.name
#         qtile.current_window.togroup(group, switch_group=switch_group)
#         if switch_screen:
#             qtile.cmd_to_screen(i + 1)
#
# keys.extend([
#     Key([mod, "shift"], "period", lazy.function(window_to_prev_screen, switch_screen=True)),
#     Key([mod, "shift"], "comma", lazy.function(window_to_next_screen, switch_screen=True)),
# ])

# --- Groups ---
groups = []
group_names = ["1", "2", "3", "4", "5", "6", "7", "8", "9"]
group_labels = ["➊", "➋", "➌", "➍", "➎", "➏", "➐", "➑", "➒"]
# Layouts per group remain constant in your example, defined globally later
group_layouts = ["monadtall"] * len(group_names)

for i in range(len(group_names)):
    groups.append(
        Group(
            name=group_names[i],
            layout=group_layouts[i].lower(), # Will use layouts defined below
            label=group_labels[i],
        ))

# CHANGE WORKSPACES
for i in groups:
    keys.extend([
        Key([mod], i.name, lazy.group[i.name].toscreen()),
        Key([mod], "Tab", lazy.screen.next_group()),
        Key([mod, "shift"], "Tab", lazy.screen.prev_group()),
     # MOVE WINDOW TO SELECTED WORKSPACE AND STAY
        Key(["mod1", "shift"], i.name, lazy.window.togroup(i.name)),
     # MOVE WINDOW TO SELECTED WORKSPACE AND FOLLOW
        Key([mod, "shift"], i.name, lazy.window.togroup(i.name, switch_group=True)), # switch_group=True is simpler
    ])

# --- Layout Theme ---
def init_layout_theme():
    return {"margin": layout_margin, # Use placeholder
            "border_width": layout_border_width, # Use placeholder
            "change_ratio": 0.02,
            "border_focus": "#fba922",
            "border_normal": "#4c566a"
            }
layout_theme = init_layout_theme()

# --- Layouts ---
layouts = [
    layout.MonadTall(**layout_theme),
    layout.MonadWide(**layout_theme),
    layout.MonadThreeCol(**layout_theme),
    layout.Matrix(**layout_theme),
    layout.Max(**layout_theme),
]

# --- Colors ---
def init_colors():
    return [["#000000", "#000000"],  # color 0
            ["#2F343F", "#2F343F"],  # color 1 : Bar background
            ["#c0c5ce", "#c0c5ce"],  # color 2 : GroupBox foreground
            ["#fba922", "#fba922"],  # color 3 : Active GroupBox, Sep lines, Current Screen Border
            ["#3384d0", "#3384d0"],  # color 4 : This screen border (inactive group)
            ["#f3f4f5", "#f3f4f5"],  # color 5 : Inactive GroupBox, Widget foregrounds, Other screen border
            ["#cd1f3f", "#cd1f3f"],  # color 6 : Urgent Group, Other Current Screen Border
            ["#62FF00", "#62FF00"],  # color 7 : Unused Green
            ["#6790eb", "#6790eb"],  # color 8 : Unused Blue
            ["#a9a9a9", "#a9a9a9"]]  # color 9 : Unused Grey
colors = init_colors()

# --- Widgets ---
def init_widgets_defaults():
    return dict(font="Noto Sans",
                fontsize=widget_font_size_default, # Use placeholder
                padding=widget_padding_default,    # Use placeholder
                background=colors[1])
widget_defaults = init_widgets_defaults()

def init_widgets_list():
    widgets_list = [
        widget.GroupBox(
            font="FontAwesome",
            fontsize=widget_font_size_groupbox, # Use placeholder
            margin_y=widget_margin_y_groupbox,  # Use placeholder
            margin_x=widget_margin_x_groupbox,  # Use placeholder
            padding_y=widget_padding_y_groupbox, # Use placeholder
            padding_x=widget_padding_x_groupbox, # Use placeholder
            borderwidth=widget_borderwidth_groupbox, # Use placeholder
            disable_drag=True,
            active=colors[3],
            inactive=colors[5],
            rounded=False,
            highlight_color=colors[0],
            highlight_method="line",
            this_screen_border=colors[4],
            this_current_screen_border=colors[3],
            other_screen_border=colors[5],
            other_current_screen_border=colors[6],
            urgent_alert_method="border",
            urgent_border=colors[6],
            foreground=colors[2],
            background=colors[1]
            ),
        widget.Sep(
            linewidth=widget_linewidth_sep, # Use placeholder
            padding=widget_padding_sep,     # Use placeholder
            foreground=colors[3],
            background=colors[1]
            ),
        widget.CurrentLayout(
            font="Noto Sans Bold",
            fontsize=widget_font_size_layout, # Use placeholder
            foreground=colors[5],
            background=colors[1]
            ),
        widget.Sep(
            linewidth=widget_linewidth_sep, # Use placeholder
            padding=widget_padding_sep,     # Use placeholder
            foreground=colors[3],
            background=colors[1]
            ),
        widget.WindowName(
            font="Noto Sans",
            fontsize=widget_font_size_windowname, # Use placeholder
            foreground=colors[5],
            background=colors[1],
            ),
        widget.Sep(
            linewidth=widget_linewidth_sep, # Use placeholder
            padding=widget_padding_sep,     # Use placeholder
            foreground=colors[3],
            background=colors[1]
            ),
        widget.Clock(
            foreground=colors[5],
            background=colors[1],
            fontsize=widget_font_size_clock, # Use placeholder
            format="%H:%M:%S"
            ),
        widget.Sep(
            linewidth=widget_linewidth_sep, # Use placeholder
            padding=widget_padding_sep,     # Use placeholder
            foreground=colors[3],
            background=colors[1]
            ),
        widget.Clock(
            foreground=colors[5],
            background=colors[1],
            fontsize=widget_font_size_clock, # Use placeholder
            format="%Y-%m-%d"
            ),
      # --- Battery Placeholder ---
      # Nix substitutes the Sep + Battery widget code here, or "" if no battery
        @battery_widget_python_code@
      # --- End Battery Placeholder ---
        widget.Sep( # Separator before Systray (always present)
            linewidth=widget_linewidth_sep, # Use placeholder
            padding=widget_padding_sep,     # Use placeholder
            foreground=colors[3],
            background=colors[1]
            ),
        widget.Systray(
            foreground=colors[5], # Foreground color doesn't really apply here
            background=colors[1],
            padding=5, # Standard padding seems consistent
            fontsize=widget_font_size_systray, # Use placeholder (though font doesn't apply)
            ),
        ]
    return widgets_list

# --- Screens ---
def init_widgets_screen0():
    widgets_screen0 = init_widgets_list()
    widgets_screen0.pop() # No systray on Monitor
    return widgets_screen0

# def init_widgets_screen1():
#     widgets_screen1 = init_widgets_list()
#     return widgets_screen1

def init_screens():
    return [Screen(bottom=bar.Bar(widgets=init_widgets_screen0(),
                                  size=bar_size,
                                  opacity=0.8),
                   wallpaper=wallpaper_screen0,
                   wallpaper_mode='fill'
                   ),
            # Screen(bottom=bar.Bar(widgets=init_widgets_screen1(),
            #                       size=bar_size,
            #                       opacity=0.8),
            #        wallpaper=wallpaper_screen1,
            #        wallpaper_mode='fill'
            #        ),
            ]

screens = init_screens()
widgets_list = init_widgets_list()
widgets_screen0 = init_widgets_screen0()
# widgets_screen1 = init_widgets_screen1()

# --- Mouse Configuration ---
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size())
]

# --- Hooks & Other Settings ---

# Autostart - Assuming script exists at ~/.config/qtile/autostart.sh
@hook.subscribe.startup_once
def start_once():
    autostart_script = os.path.join(home, '.config', 'qtile', 'autostart.sh')
    if os.path.exists(autostart_script):
        subprocess.call([autostart_script])

@hook.subscribe.startup
def start_always():
    # Set the cursor to something sane in X
    subprocess.Popen(['xsetroot', '-cursor_name', 'left_ptr'])

@hook.subscribe.client_new
def set_floating(window):
    # Check for transient windows (pop-ups usually)
    transient_for = window.window.get_wm_transient_for()
    # Check for specific window types
    wm_type = window.window.get_wm_type()
    floating_types = ["notification", "toolbar", "splash", "dialog"]
    # Check for specific WM_CLASS (useful for apps that don't set type correctly)
    # wm_class = window.get_wm_class() # Returns tuple (instance, class) or None
    # Use Match rules defined in floating_layout instead for consistency

    if transient_for or (wm_type in floating_types):
        window.floating = True

# Floating Layout Rules (Refined from original)
floating_layout = layout.Floating(float_rules=[
  # Run `xprop` -> WM_CLASS(STRING) = "instance", "class"
  # `wmctrl -lx` also useful
    *layout.Floating.default_float_rules, # Default rules include many dialogs, etc.
    Match(wm_class='confirmreset'), # gitk
    Match(wm_class='makebranch'), # gitk
    Match(wm_class='maketag'), # gitk
    Match(wm_class='ssh-askpass'), # ssh password prompt
    Match(title='branchdialog'), # gitk
    Match(title='pinentry'), # GPG key password entry
    Match(wm_class='pinentry-gtk-2'), # GPG password entry
    Match(wm_class='Arandr'),
    Match(wm_class='feh'), # Image viewer often used floating
    Match(wm_class='Galculator'),
    Match(wm_class='Nitrogen'),
    Match(wm_class='Lxappearance'),
    Match(wm_class='Pavucontrol'),
  # Add more rules based on `xprop` output for specific apps if needed
],
    # Use theme border settings for floating windows too? Optional.
    
    border_focus=colors[3], # Focused floating window border
    border_normal=colors[9], # Unfocused floating window border (use grey?)
    border_width=layout_border_width, # Use consistent border width
    fullscreen_border_width=0, # No border for fullscreen floating windows
)

# General Settings
main = None # Required for scripts that check qtile config? Usually not needed.
dgroups_key_binder = None
dgroups_app_rules = [] # Specify group rules for apps here if needed
follow_mouse_focus = True
bring_front_click = False # 'floating_only' might be useful
cursor_warp = False
auto_fullscreen = True
focus_on_window_activation = "smart" # Recommended
reconfigure_screens = True # Allow qtile to adapt to screen changes

# Set WM Name (Some Java apps might need this)
wmname = "LG3D" # Use this instead of "Qtile" for compatibility if needed
